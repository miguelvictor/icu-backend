# Generated by Django 3.2.4 on 2021-07-02 12:53

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import icu.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('national_id', models.CharField(max_length=18, unique=True, validators=[icu.validators.validate_national_id], verbose_name='National ID')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], editable=False, max_length=1, verbose_name='gender')),
                ('contact_no', models.CharField(blank=True, max_length=150, verbose_name='Contact Number')),
                ('date_of_birth', models.DateField(editable=False, null=True, verbose_name='Date of Birth')),
                ('worker_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='worker ID')),
                ('position', models.CharField(choices=[('nurse', '医护'), ('doctor', '医师'), ('dean', '院长')], max_length=50, verbose_name='position')),
                ('start_date', models.DateField(auto_now_add=True, verbose_name='Start Date')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('hadm_id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Admission ID')),
                ('admittime', models.DateTimeField(auto_now_add=True, help_text='Provides the date and time the patient was admitted to the hospital.', verbose_name='Admission Time')),
                ('dischtime', models.DateTimeField(blank=True, help_text='Provides the date and time the patient was discharged from the hospital.', null=True, verbose_name='Discharge Time')),
                ('deathtime', models.DateTimeField(blank=True, help_text='Provides the time of in-hospital death for the patient. Note that this is only present if the patient died in-hospital, and is almost always the same as the dischtime field.', null=True, verbose_name='Death Time')),
                ('admission_type', models.CharField(choices=[('ambulatory observation', 'Ambulatory Observation'), ('direct emer.', 'Direct Emergency'), ('direct observation', 'Direct Observation'), ('elective', 'Elective'), ('eu observation', 'EU Observation'), ('ew emer.', 'EW Emergency'), ('observation admit', 'Observation Admit'), ('surgical same day admission', 'Surgical Same Day Admission'), ('urgent', 'Urgent')], help_text='Useful for classifying the urgency of the admission.', max_length=50, verbose_name='Admission Type')),
                ('admission_location', models.CharField(blank=True, help_text='Provides information about the location of the patient prior to arriving at the hospital. Note that as the emergency room is technically a clinic, patients who are admitted via the emergency room usually have it as their admission location.', max_length=60, null=True, verbose_name='Admission Location')),
                ('discharge_location', models.CharField(blank=True, help_text='The disposition of the patient after they are discharged from the hospital.', max_length=60, null=True, verbose_name='Discharge Location')),
                ('insurance', models.CharField(blank=True, max_length=255, verbose_name='insurance')),
                ('language', models.CharField(blank=True, max_length=50, verbose_name='language')),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('widowed', 'Widowed'), ('divorced', 'Divorced')], max_length=50, null=True, verbose_name='marital status')),
                ('edregtime', models.DateTimeField(blank=True, help_text='The date and time at which the patient was registered from the emergency department.', null=True, verbose_name='ED Registration Time')),
                ('edouttime', models.DateTimeField(blank=True, help_text='The date and time at which the patient was discharged from the emergency department.', null=True, verbose_name='ED Discharge Time')),
                ('hospital_expire_flag', models.BooleanField(blank=True, help_text='This is a binary flag which indicates whether the patient died within the given hospitalization. 1 indicates death in the hospital, and 0 indicates survival to hospital discharge.', verbose_name='Hospital Expire Flag')),
            ],
            options={
                'verbose_name': 'admission',
                'verbose_name_plural': 'admissions',
            },
        ),
        migrations.CreateModel(
            name='ChartEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('charttime', models.DateTimeField(help_text='Records the time at which an observation was made, and is usually the closest proxy to the time the data was actually measured.', verbose_name='chart time')),
                ('storetime', models.DateTimeField(help_text='Records the time at which an observation was manually input or manually validated by a member of the clinical staff.', verbose_name='store time')),
                ('value', models.TextField(help_text='Contains the value measured for the concept identified by the ITEMID.', verbose_name='value')),
                ('valuenum', models.FloatField(blank=True, help_text='The numeric format of the same value. If data is not numeric, this field is null.', verbose_name='value (numeric)')),
                ('valueuom', models.TextField(blank=True, help_text='The unit of measurement for the value, if appropriate.', verbose_name='unit of measurement')),
                ('warning', models.BooleanField(help_text='Specifies if a warning for this observation was manually documented by the care provider.', verbose_name='warning')),
            ],
            options={
                'verbose_name': 'chart event',
                'verbose_name_plural': 'chart events',
            },
        ),
        migrations.CreateModel(
            name='ICUEvent',
            fields=[
                ('itemid', models.AutoField(primary_key=True, serialize=False, verbose_name='Item ID')),
                ('label', models.CharField(help_text='Describes the concept which is represented by this item.', max_length=200, verbose_name='label')),
                ('abbreviation', models.CharField(help_text='Lists a common abbreviation for the label.', max_length=100, verbose_name='abbreviation')),
                ('linksto', models.CharField(choices=[('datetimeevents', 'datetimeevents'), ('chartevents', 'chartevents'), ('inputevents', 'inputevents'), ('procedureevents', 'procedureevents'), ('outputevents', 'outputevents')], help_text='Provides the table name which the data links to. For example, a value of ‘chartevents’ indicates that the itemid of the given row is contained in the CHARTEVENTS table. A single itemid is only used in one event table, that is, if an itemid is contained in CHARTEVENTS it will not be contained in any other event table (e.g. IOEVENTS, CHARTEVENTS, etc).', max_length=50, verbose_name='Links To')),
                ('category', models.CharField(help_text='Provides some information of the type of data the itemid corresponds to. Examples include ‘ABG’, which indicates the measurement is sourced from an arterial blood gas, ‘IV Medication’, which indicates that the medication is administered through an intravenous line, and so on.', max_length=100, verbose_name='category')),
                ('unitname', models.CharField(blank=True, help_text='Specifies the unit of measurement used for the itemid. This column is not always available, and this may be because the unit of measurement varies, a unit of measurement does not make sense for the given data type, or the unit of measurement is simply missing. Note that there is sometimes additional information on the unit of measurement in the associated event table, e.g. the valueuom column in CHARTEVENTS.', max_length=100, null=True, verbose_name='Unit Name')),
                ('param_type', models.CharField(choices=[('Date and time', 'Date and time'), ('Numeric', 'Numeric'), ('Text', 'Text'), ('Solution', 'Solution'), ('Processes', 'Processes'), ('Checkbox', 'Checkbox'), ('Numeric with tag', 'Numeric with tag')], help_text='Describes the type of data which is recorded: a date, a number or a text field.', max_length=30, verbose_name='Parameter Type')),
                ('lownormalvalue', models.FloatField(blank=True, help_text='Stores the lowest but still considered normal value for the this measurement.', null=True, verbose_name='Low Normal Value')),
                ('highnormalvalue', models.FloatField(blank=True, help_text='Stores the highest but still considered normal value for the this measurement. Note that a reference range encompasses the expected value of a measurement: values outside of this may still be physiologically plausible, but are considered unusual.', null=True, verbose_name='High Normal Value')),
            ],
            options={
                'verbose_name': 'ICU Event',
                'verbose_name_plural': 'ICU Events',
            },
        ),
        migrations.CreateModel(
            name='ICUStay',
            fields=[
                ('stay_id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ICU Stay ID')),
                ('first_careunit', models.CharField(help_text='The first ICU type in which the patient was cared for.', max_length=20, verbose_name='First Care Unit')),
                ('last_careunit', models.CharField(help_text='The last ICU type in which the patient was cared for.', max_length=20, verbose_name='Last Care Unit')),
                ('intime', models.DateTimeField(auto_now_add=True, help_text='Provides the date and time the patient was transferred into the ICU.', verbose_name='Time In')),
                ('outtime', models.DateTimeField(blank=True, help_text='Provides the date and time the patient was transferred out of the ICU.', null=True, verbose_name='Time Out')),
            ],
            options={
                'verbose_name': 'ICU stay',
                'verbose_name_plural': 'ICU stays',
            },
        ),
        migrations.CreateModel(
            name='LabEvent',
            fields=[
                ('labevent_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Lab Event ID')),
                ('specimen_id', models.IntegerField(help_text='Uniquely denoted the specimen from which the lab measurement was made. Most lab measurements are made on patient derived samples (specimens) such as blood, urine, and so on. Often multiple measurements are made on the same sample. The specimen_id will group measurements made on the same sample, e.g. blood gas measurements made on the same sample of blood.', verbose_name='Specimen ID')),
                ('charttime', models.DateTimeField(help_text='The time at which the laboratory measurement was charted. This is usually the time at which the specimen was acquired, and is usually significantly earlier than the time at which the measurement is available.', verbose_name='Chart Time')),
                ('storetime', models.DateTimeField(blank=True, help_text='The time at which the measurement was made available in the laboratory system. This is when the information would have been available to care providers.', null=True, verbose_name='Store Time')),
                ('value', models.CharField(help_text='The result of the laboratory measurement.', max_length=200, verbose_name='value')),
                ('valuenum', models.FloatField(blank=True, help_text='If value is numeric, this contains the value cast as a numeric data type.', null=True, verbose_name='Value (Numeric)')),
                ('valueuom', models.CharField(blank=True, help_text='The unit of measurement for the laboratory concept.', max_length=20, verbose_name='Unit of Measurement')),
                ('ref_range_lower', models.FloatField(blank=True, help_text='Lower reference range indicating the normal range for the laboratory measurements. Values outside the reference ranges are considered abnormal.', null=True, verbose_name='Ref Range Lower')),
                ('ref_range_upper', models.FloatField(blank=True, help_text='Upper reference range indicating the normal range for the laboratory measurements. Values outside the reference ranges are considered abnormal.', null=True, verbose_name='Ref Range Upper')),
                ('flag', models.CharField(blank=True, help_text='A brief string mainly used to indicate if the laboratory measurement is abnormal.', max_length=10, verbose_name='Flag')),
                ('priority', models.CharField(blank=True, help_text='The priority of the laboratory measurement: either routine or stat (urgent).', max_length=7, verbose_name='Priority')),
                ('comments', models.TextField(blank=True, help_text='Deidentified free-text comments associated with the laboratory measurement. Usually these provide information about the sample, whether any notifications were made to care providers regarding the results, considerations for interpretation, or in some cases the comments contain the result of the laboratory itself. Comments which have been fully deidentified (i.e. no information content retained) are present as three underscores: ___. A NULL comment indicates no comment was made for the row.', verbose_name='Comments')),
            ],
            options={
                'verbose_name': 'Laboratory Event',
                'verbose_name_plural': 'Laboratory Events',
            },
        ),
        migrations.CreateModel(
            name='LabItem',
            fields=[
                ('itemid', models.AutoField(help_text='A unique identifier for a laboratory concept. itemid is unique to each row, and can be used to identify data in LABEVENTS associated with a specific concept.', primary_key=True, serialize=False, verbose_name='Item ID')),
                ('label', models.CharField(help_text='Describes the concept which is represented by the itemid.', max_length=50, verbose_name='Label')),
                ('fluid', models.CharField(help_text='Describes the substance on which the measurement was made. For example, chemistry measurements are frequently performed on blood, which is listed in this column as ‘BLOOD’. Many of these measurements are also acquirable on other fluids, such as urine, and this column differentiates these distinct concepts.', max_length=50, verbose_name='Fluid')),
                ('category', models.CharField(help_text='Provides higher level information as to the type of measurement. For example, a category of ‘ABG’ indicates that the measurement is an arterial blood gas.', max_length=50, verbose_name='category')),
                ('loinc_code', models.CharField(blank=True, help_text='Contains the LOINC code associated with the given itemid. LOINC is an ontology which originally specified laboratory measurements but has since expanded to cover a wide range of clinically relevant concepts. LOINC openly provide a table which contains a large amount of detail about each LOINC code. This table is freely available online.', max_length=50, verbose_name='LOINC Code')),
            ],
            options={
                'verbose_name': 'Laboratory Item',
                'verbose_name_plural': 'Laboratory Items',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('subject_id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='patient ID')),
                ('national_id', models.CharField(max_length=18, validators=[icu.validators.validate_national_id], verbose_name='National ID')),
                ('name', models.CharField(max_length=255, verbose_name='Patient Name')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], editable=False, max_length=1, verbose_name='gender')),
                ('date_of_birth', models.DateField(editable=False, verbose_name='Date of Birth')),
                ('ethnicity', models.CharField(choices=[('汉族', '汉族'), ('满族', '满族'), ('蒙古族', '蒙古族'), ('回族', '回族'), ('藏族', '藏族'), ('维吾尔族', '维吾尔族'), ('苗族', '苗族'), ('彝族', '彝族'), ('壮族', '壮族'), ('布依族', '布依族'), ('侗族', '侗族'), ('瑶族', '瑶族'), ('白族', '白族'), ('土家族', '土家族'), ('哈尼族', '哈尼族'), ('哈萨克族', '哈萨克族'), ('傣族', '傣族'), ('黎族', '黎族'), ('傈僳族', '傈僳族'), ('佤族', '佤族'), ('畲族', '畲族'), ('高山族', '高山族'), ('拉祜族', '拉祜族'), ('水族', '水族'), ('东乡族', '东乡族'), ('纳西族', '纳西族'), ('景颇族', '景颇族'), ('柯尔克孜族', '柯尔克孜族'), ('土族', '土族'), ('达斡尔族', '达斡尔族'), ('仫佬族', '仫佬族'), ('羌族', '羌族'), ('布朗族', '布朗族'), ('撒拉族', '撒拉族'), ('毛南族', '毛南族'), ('仡佬族', '仡佬族'), ('锡伯族', '锡伯族'), ('阿昌族', '阿昌族'), ('普米族', '普米族'), ('朝鲜族', '朝鲜族'), ('塔吉克族', '塔吉克族'), ('怒族', '怒族'), ('乌孜别克族', '乌孜别克族'), ('俄罗斯族', '俄罗斯族'), ('鄂温克族', '鄂温克族'), ('德昂族', '德昂族'), ('保安族', '保安族'), ('裕固族', '裕固族'), ('京族', '京族'), ('塔塔尔族', '塔塔尔族'), ('独龙族', '独龙族'), ('鄂伦春族', '鄂伦春族'), ('赫哲族', '赫哲族'), ('门巴族', '门巴族'), ('珞巴族', '珞巴族'), ('基诺族', '基诺族'), ('white', 'White'), ('black/african american', 'Black/African American'), ('asian', 'Asian'), ('hispanic/latino', 'Hispanic/Latino'), ('american indian/alaska native', 'American Indian/Alaska Native'), ('unknown', 'Unknown')], max_length=50, verbose_name='ethnicity')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('contact_no', models.CharField(blank=True, max_length=150, null=True, verbose_name='contact number')),
                ('address', models.TextField(blank=True, null=True, verbose_name='address')),
                ('dod', models.DateTimeField(blank=True, null=True, verbose_name='Date of Death')),
            ],
            options={
                'verbose_name': 'patient',
                'verbose_name_plural': 'patients',
            },
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['national_id'], name='icu_patient_nationa_56da64_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['name'], name='icu_patient_name_edbb2a_idx'),
        ),
        migrations.AddField(
            model_name='labevent',
            name='admission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='icu.admission'),
        ),
        migrations.AddField(
            model_name='labevent',
            name='lab_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='icu.labitem'),
        ),
        migrations.AddField(
            model_name='labevent',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='icu.patient'),
        ),
        migrations.AddField(
            model_name='icustay',
            name='admission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='icu.admission'),
        ),
        migrations.AddField(
            model_name='icustay',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='icu.patient'),
        ),
        migrations.AddField(
            model_name='chartevent',
            name='admission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='icu.admission'),
        ),
        migrations.AddField(
            model_name='chartevent',
            name='icuevent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='icu.icuevent'),
        ),
        migrations.AddField(
            model_name='chartevent',
            name='icustay',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='icu.icustay'),
        ),
        migrations.AddField(
            model_name='chartevent',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='icu.patient'),
        ),
        migrations.AddField(
            model_name='admission',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='icu.patient'),
        ),
        migrations.AddField(
            model_name='appuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='appuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='admission',
            index=models.Index(fields=['admittime'], name='icu_admissi_admitti_838c99_idx'),
        ),
    ]
