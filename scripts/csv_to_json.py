from id_validator import validator
from pathlib import Path
from tqdm import tqdm

import argparse
import csv
import json
import random

ETHNICITY_CHOICES = (
    ("汉族", "汉族"),
    ("满族", "满族"),
    ("蒙古族", "蒙古族"),
    ("回族", "回族"),
    ("藏族", "藏族"),
    ("维吾尔族", "维吾尔族"),
    ("苗族", "苗族"),
    ("彝族", "彝族"),
    ("壮族", "壮族"),
    ("布依族", "布依族"),
    ("侗族", "侗族"),
    ("瑶族", "瑶族"),
    ("白族", "白族"),
    ("土家族", "土家族"),
    ("哈尼族", "哈尼族"),
    ("哈萨克族", "哈萨克族"),
    ("傣族", "傣族"),
    ("黎族", "黎族"),
    ("傈僳族", "傈僳族"),
    ("佤族", "佤族"),
    ("畲族", "畲族"),
    ("高山族", "高山族"),
    ("拉祜族", "拉祜族"),
    ("水族", "水族"),
    ("东乡族", "东乡族"),
    ("纳西族", "纳西族"),
    ("景颇族", "景颇族"),
    ("柯尔克孜族", "柯尔克孜族"),
    ("土族", "土族"),
    ("达斡尔族", "达斡尔族"),
    ("仫佬族", "仫佬族"),
    ("羌族", "羌族"),
    ("布朗族", "布朗族"),
    ("撒拉族", "撒拉族"),
    ("毛南族", "毛南族"),
    ("仡佬族", "仡佬族"),
    ("锡伯族", "锡伯族"),
    ("阿昌族", "阿昌族"),
    ("普米族", "普米族"),
    ("朝鲜族", "朝鲜族"),
    ("塔吉克族", "塔吉克族"),
    ("怒族", "怒族"),
    ("乌孜别克族", "乌孜别克族"),
    ("俄罗斯族", "俄罗斯族"),
    ("鄂温克族", "鄂温克族"),
    ("德昂族", "德昂族"),
    ("保安族", "保安族"),
    ("裕固族", "裕固族"),
    ("京族", "京族"),
    ("塔塔尔族", "塔塔尔族"),
    ("独龙族", "独龙族"),
    ("鄂伦春族", "鄂伦春族"),
    ("赫哲族", "赫哲族"),
    ("门巴族", "门巴族"),
    ("珞巴族", "珞巴族"),
    ("基诺族", "基诺族"),
)


def get_config(path):
    with open(path, "r", encoding="utf-8") as fd:
        return json.load(fd)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--config", type=str, required=True, help="The path to config file."
    )

    return parser.parse_args()


def generate_national_id(sex):
    if sex is not None:
        sex = 1 if sex == "M" else 0

    return validator.fake_id(sex=sex)


def generate_chinese_name():
    n_chars = random.choices([2, 3, 4], [0.3, 0.6, 0.1])[0]
    return "".join(chr(random.randint(0x4E00, 0x9FBF)) for _ in range(n_chars))


def generate_ethnicity():
    return random.choice(ETHNICITY_CHOICES)[0]


def main(args):
    config = get_config(args.config)
    in_file = Path(config['csv'])
    out_file = in_file.with_suffix('.jsonl')

    with in_file.open("r", encoding="utf-8") as fd_in, \
            out_file.open("w", encoding="utf-8") as fd_out:
        reader = csv.reader(fd_in)
        headers = next(reader)

        for row in tqdm(reader, total=config['total']):
            assert len(headers) == len(row)

            # convert csv row to a python dictionary
            row_as_dict = {k: v for k, v in zip(headers, row)}

            # initialize fixture data
            data = {
                "model": config['model'],
                "pk": row_as_dict[config['pk']],
                "fields": {},
            }

            # copy required fields
            for field_name, meta in config['fields']['copy'].items():
                # parse meta information
                meta = meta.split(':', 1)
                field_type = meta[0]
                rename_to = x if len(meta) == 2 and (
                    x := meta[1]) else field_name

                # optional values must be transformed to None
                value = x if (x := row_as_dict[field_name]) else None

                # perform type conversion (if necessary)
                if value is not None:
                    if field_type == 'int':
                        value = int(value)
                    elif field_type == 'float':
                        value = float(value)

                # add field
                data['fields'][rename_to] = value

            # add autogenerated fields
            if 'auto' in config['fields']:
                for field_name in config['fields']['auto']:
                    if field_name == 'national_id':
                        gender = row_as_dict["gender"] if 'gender' in row_as_dict else None
                        value = generate_national_id(gender)
                    elif field_name == 'name':
                        value = generate_chinese_name()
                    elif field_name == 'ethnicity':
                        value = generate_ethnicity()
                    else:
                        raise ValueError(
                            f'Could not autogenerate field "{field_name}"')

                    data['fields'][field_name] = value

            # dump json object to output file
            fd_out.write(json.dumps(data, ensure_ascii=False) + "\n")


if __name__ == "__main__":
    main(parse_args())
